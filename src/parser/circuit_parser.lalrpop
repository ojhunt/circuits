use crate::parser::ast::*;

grammar;

pub Id: Ident = { 
    r"[a-zA-Z_][a-zA-Z_0-9]*" => Ident::new(<>)
}

pub Circuit : String = {
    "circuit" <id:Id> ("<"  ">")? => "circuit".into()
}

pub Literal : Expression = {
    r"0[bB][01]+" => Expression::Vector((<>)[2..].chars().map(|a| a == '1').collect()),
    r"0[xX][0-9a-f]+" => {
        Expression::Integer(usize::from_str_radix(&(<>)[2..], 16).unwrap())
    }
}

pub Expr : Expression = {
    <id:Id> => Expression::Resolve(id),
    <e:Expr> "." <id:Id> => Expression::DotAccess(Box::new(e), id),
    <e:Expr> "[" <subscript:Expr> "]" => Expression::BracketAccess(Box::new(e), Box::new(subscript)),
    Literal => <>,
}

pub Program : () = {}